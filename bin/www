#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../main');
var debug = require('debug')('node-express:server');
var http = require('http');
var fs = require('fs');

/**
 * Get port from environment and store in Express.
 */
 
var net = require('net');
var connectionsFromHTTP = {};				// Format: "id":Socket
var connectionsFromDevices = {};			// Format: "id":Socket

/**
 * Create TCP Server
 */
 
var serverTCP = net.createServer(function (socket) {
	console.log('CONNECTED: ' + socket.remoteAddress +':'+ socket.remotePort);
	var text_data = "";
    
	// Add a 'data' event handler to this instance of socket
    socket.on('data', function(data) {
        console.log('DATA ' + socket.remoteAddress + ': ' + data);
		text_data += data;
		var texts = text_data.split("\r");
		//console.log(texts);
		
		if (texts.length >= 2){					// If the data are all received
			//console.log(texts);
			text_data = ""; 					// Reset the text data			
			
			if (texts[0].indexOf("MAC")===0){
				var parts = texts[0].split(" ");
				
				if (parts[1] == "HTTP"){	// This message is from HTTP server
					var id = parts[2];
					connectionsFromHTTP[id] = socket;
				}
				else{	// This message is from the device
					var id = parts[1];
					connectionsFromDevices[id] = socket;
					var wstream = fs.createWriteStream('files/MAC.txt',{'flags': 'a'});
					wstream.write(id + "\n");
				}
			}
			
			else {
				if (texts[0].indexOf("HTTP")===0){
					//var parts = texts[0].split(" ");
					var command = texts[2];
					connectionsFromHTTP[texts[1]] = socket;
					
					//console.log(targetSocketID);
					var targetSocket = connectionsFromDevices[texts[1]];
					if (targetSocket != null)
						targetSocket.write(command);
				}
				else{	// messages from device
					var index = "";
					for (key in connectionsFromDevices){
						if (connectionsFromDevices[key] == socket){
							index = key;
							break;
						}
					}
					
					console.log(index);
					var targetSocket = connectionsFromHTTP[index];
					if (targetSocket != null)
						targetSocket.write(texts[0]);
				}
			}
		}
    });

    // Add a 'close' event handler to this instance of socket
    socket.on('close', function(data) {
		//delete connections[connectionID];
    });
});

function parsetoTCPSocket(data, socketID){
	var targetSocketID = socketID; //getTargetSocket(connectionsFromHTTP, socket);
	//console.log(targetSocketID);
	var targetSocket = connectionsFromDevices[targetSocketID];
	if (targetSocket != null)
		targetSocket.write(data);
}

function parsetoHTTPSocket(data, socket){
	var targetSocketID = getTargetSocket(connectionsFromDevices, socket);
	console.log(targetSocketID);
	var targetSocket = connectionsFromHTTP[targetSocketID];
	if (targetSocket != null)
		targetSocket.write(data);
}

function getTargetSocket(connections, socket){
	for (key in connections){
		if (connections[key] == socket){
			return key;
		}
	}
}

//serverTCP.listen(1337, '192.168.43.25'); 
//serverTCP.listen(1337, '127.0.0.1');
serverTCP.listen(1337, '192.168.0.8');
//serverTCP.listen(1337, '10.21.47.59');

var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);

/**
 * Listen on provided port, on all network interfaces.
 */
server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}